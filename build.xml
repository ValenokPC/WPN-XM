<?xml version="1.0" encoding="UTF-8"?>
<project name="WPN-XM Server Stack" default="main" basedir=".">
<!--╔════════════════════════════════════════════════════════════════════════════╗
    ║ WPИ-XM Server Stack                                                        ║
    ║ Copyright (c) Jens A. Koch <jakoch@web.de>                                 ║
    ║ https://wpn-xm.org/                                                        ║
    ║                                                                            ║
    ║ Licensed under the MIT License.                                            ║
    ║ See the bundled LICENSE file for copyright and license information.        ║
    ╚════════════════════════════════════════════════════════════════════════════╝-->

    <!-- ============ Build Properties ============ -->

    <!-- Version -->
    <property name="wpnxm.Name"    value="WPN-XM Server Stack"/>
    <property name="version.Major" value="0"/>
    <property name="version.Minor" value="8"/>
    <property name="version.Patch" value="7"/>
    <property name="wpnxm.Version" value="${version.Major}.${version.Minor}.${version.Patch}"/>

    <!-- Paths -->
    <property name="dir.Base"                       value="${project.basedir}"/>
    <property name="dir.Bin"                        value="${dir.Base}/bin"/>
    <property name="dir.Build"                      value="${dir.Base}/_build"/>
    <property name="dir.Downloads"                  value="${dir.Base}/downloads"/>
    <property name="dir.Installers"                 value="${dir.Base}/installers"/>
    <property name="dir.Registry"                   value="${dir.Base}/registry"/>
    <property name="dir.InstallerRegistries"        value="${dir.Base}/registry/installer"/>
    <property name="dir.NextInstallerRegistries"    value="${dir.Base}/registry/installer/next"/>

    <!-- Tools -->
    <property name="aria" value="${wine} ${dir.Bin}/aria2/aria2c.exe"/>
    <property name="7z"   value="${wine} ${dir.Bin}/7zip/7za.exe"/>

    <!-- InnoSetup Compiler -->
    <condition property="innosetupcompiler" value="${dir.Bin}\innosetup\ISCC.exe"><os family="windows"/></condition>
    <condition property="innosetupcompiler" value="${wine} ${dir.Bin}/innosetup/ISCC.exe"><os family="unix"/></condition>

    <!-- Wine -->
    <!-- /opt/wine-staging/bin/ -->
    <condition property="wine" value="wine cmd.exe /c"><os family="unix"/></condition>

    <!-- PHP Configuration -->
    <!-- raise memory -->
    <php expression="ini_set('memory_limit', '512M');" />
    <!-- 2 force garbage collection during stacked / foreached PhingCalls -->
    <php expression="gc_collect_cycles();" />

    <!-- ============ Import Build Files ============ -->

    <import file="build-scripts/download.build.xml" />
    <import file="build-scripts/stripdown.build.xml" />
    <import file="build-scripts/compile-installers.build.xml" />

    <!-- ============ Include Tasks ============ -->

    <includepath classpath="${dir.Base}/build-scripts/tasks" />

    <!-- ============ Targets ============ -->

    <target name="clean-build-dir" description="Mr. Proper cleans the build environment and recreates it.">
        <delete dir="${dir.Build}"/>
        <mkdir dir="${dir.Build}"/>
        <delete dir="${dir.Downloads}/stripdown"/>
        <delete dir="${dir.Base}/www/tools/webinterface"/>
        <delete>
            <fileset dir="${dir.Registry}">
                <include name="**/downloads*.json" />
            </fileset>
        </delete>
    </target>

    <target name="reset-git-submodules"
            description="Reset the git submodules to their original state.">
         <!-- hard reset to latest commit. deletes all untracked files/folders, e.g. /build/* -->
        <exec executable="git">
            <arg line="submodule foreach git reset --hard HEAD"/>
        </exec>
    </target>

    <!-- The "git" command must be on your env path, check that with "env|grep PATH". -->
    <target name="update-git-submodules"
            description="Updating git submodules. Fetching latest version of server-control-panel and webinterface.">
        <exec executable="git">
            <arg line="submodule update --init --recursive --force"/>
        </exec>
        <exec executable="git">
           <arg line="submodule foreach git pull origin master"/>
        </exec>
    </target>

    <target name="bump-version-number"
            description="Inserts the current version number into the InnoScripts and the Webinterface."
            depends="reset-git-submodules, update-git-submodules">

        <echo message="Inserting Version Number into Installer Script Files"/>
        <copy todir="${dir.Build}" overwrite="true">
            <fileset dir="${dir.Installers}">
                <include name="**/*.iss"/>
            </fileset>
            <filterchain>
                <replacetokens>
                    <token key="STACK_VERSION" value="${wpnxm.Version}"/>
                </replacetokens>
            </filterchain>
        </copy>

        <!-- Insert the version number into webinterface's "bootstrap.php" file. -->
        <!--<loadfile srcfile="${dir.Base}/www/tools/webinterface/bootstrap.php" property="filecontent.php.bootstrap">
            <filterchain>
                <replacetokens>
                    <token key="STACK_VERSION" value="${wpnxm.Version}"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <delete file="${dir.Base}/www/tools/webinterface/bootstrap.php"/>
        <echo file="${dir.Base}/www/tools/webinterface/bootstrap.php">${filecontent.php.bootstrap}</echo>-->
    </target>

    <target name="print-version-number">
        <echo message="Building ${wpnxm.Name} v${wpnxm.Version} Setup Executables"/>
    </target>

    <target name="clean-webinterface-folder">
        <echo message="Cleans the webinterface folder for production, by removing .git and dev files."/>
        <!-- git -->
        <delete file="${dir.Base}/www/tools/webinterface/.git"/>
        <delete file="${dir.Base}/www/tools/webinterface/.gitignore"/>
        <delete file="${dir.Base}/www/tools/webinterface/.gitattributes"/>
        <!-- dev -->
        <delete file="${dir.Base}/www/tools/webinterface/.travis.yml"/>
        <delete file="${dir.Base}/www/tools/webinterface/composer.json"/>
        <delete dir="${dir.Base}/www/tools/webinterface/tests"/>
    </target>

    <target name="commit-versionized-registries"
            description="Commits the versionized installer registries (all untracked files in /registry folder).">
        <!-- set account identity -->
        <exec command="git config --global user.email &quot;travis@travis-ci.org &quot;" passthru="true"/>
        <exec command="git config --global user.name &quot;Travis CI&quot;" passthru="true"/>
        <!-- git stage ALL -->
        <exec command="cd ${dir.Registry} &amp; git add -A" level="debug" passthru="true"/>
        <!-- git commit -->
        <exec command="cd ${dir.Registry} &amp; git commit -am &quot;Added WPN-XM Installer Registries for Version ${wpnxm.Version}&quot;" level="debug" passthru="true"/>
    </target>

    <target name="versionize-registries"
            description="Adds the build version number to the 'next' installer registry files.">
        <echo message="Versionizing Registries"/>
        <echo message="From: ${dir.InstallerRegistries}/next"/>
        <echo message="To:   ${dir.InstallerRegistries}/v${wpnxm.Version}"/>
        <mkdir dir="${dir.InstallerRegistries}/v${wpnxm.Version}" />
        <copy todir="${dir.InstallerRegistries}/v${wpnxm.Version}">
          <mapper type="regexp" from="^(.*)-next-(.*).json" to="\1-${wpnxm.Version}-\2.json"/>
          <fileset dir="${dir.InstallerRegistries}/next">
            <include name="*next*.json"/>
          </fileset>
        </copy>
    </target>

    <target name="update-component-sizes">
      <taskdef name="UpdateComponentSizes" classname="UpdateComponentSizes" />
      <UpdateComponentSizes downloadDir="${dir.Downloads}" />
    </target>

    <target name="main"
            depends="clean-build-dir,
                    reset-git-submodules,
                    update-git-submodules,
                    check-installers,
                    bump-version-number,
                    print-version-number,
                    lint-installers,
                    clean-webinterface-folder,
                    versionize-registries,
                    make-downloads-dir,
                    create-download-lists,
                    download-components,
                    check-downloads,
                    stripdown-pool,
                    copy-downloads,                    
                    compile-webinstaller,
                    compile-standard,
                    compile-full,
                    compile-lite,
                    check-installers-were-build,
                    commit-versionized-registries,
                    reset-git-submodules">
    </target>

    <target name="main-part1"
            depends="clean-build-dir,
                    reset-git-submodules,
                    update-git-submodules,
                    check-installers,
                    bump-version-number,
                    print-version-number,
                    lint-installers,
                    clean-webinterface-folder,
                    versionize-registries,
                    make-downloads-dir,
                    create-download-lists">
    </target>
    <!-- removed "download-components" from main-part2, trying to execute this target with ant -->
    <target name="main-part2"
            depends="check-downloads,
                    stripdown-pool,
                    copy-downloads,                   
                    compile-webinstaller,
                    compile-standard,
                    compile-full,
                    compile-lite,
                    check-installers-were-build,
                    commit-versionized-registries,
                    reset-git-submodules">
    </target>

</project>